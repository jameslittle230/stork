on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      fake_tag:
        description: 'The "tag" to publish the release under'
        required: true
        default: 'v0.0.0-test'

name: "Create Release after Tag"
jobs:
  test:
    name: Test Job
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - run: "echo ${{ github.events.input.fake_tag }}"

  release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.events.input.fake_tag || github.ref }}
          release_name: ${{ github.events.input.fake_tag || github.ref }}
          draft: true
          prerelease: false

  build_web_artifacts:
    name: "Build web artifacts"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2

      - name: Checkout Federalist Papers Repository
        uses: actions/checkout@v2
        with:
          repository: jameslittle230/federalist
          path: ./test/federalist

      - name: Set up wasm-pack
        uses: actions-rs/install@v0.1
        with:
          crate: wasm-pack
          use-tool-cache: true

      - name: Build WASM
        run: wasm-pack build --target web --out-name stork  -- --no-default-features

      - name: Build Federalist index file
        run: ./target/release/stork build -i ./test/federalist-config/federalist.toml -o test/federalist.st

      - name: Move indexes to dist directory
        run: mkdir -p dist && cp test/*.st dist

      - run: yarn install
      - run: yarn webpack --mode=production

      - name: Upload JS/WASM artifacts
        uses: actions/upload-artifact@v1
        with:
          name: web-artifacts
          path: ./dist/

  build_ubuntu_20:
    name: "Build Artifact (Ubuntu 20.04)"
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v2
      - run: cargo build --verbose --release
      - uses: actions/upload-artifact@v1
        with:
          name: stork-ubuntu-20-04
          path: ./target/release/stork


  build_macos_10_15:
    name: "Build Artifact (macOS)"
    runs-on: "macos-latest"
    steps:
      - uses: actions/checkout@v2
      - run: cargo build --verbose --release
      - uses: actions/upload-artifact@v1
        with:
          name: stork-macos-10-15
          path: ./target/release/stork

  upload_bin_artifacts_to_release:
    name: "Upload binary artifacts to Github Release"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        artifact: [
          "stork-macos-10-15",
          "stork-ubuntu-20-04",
        ]
    needs: ["release", "build_ubuntu_20", "build_macos_10_15"]
    steps:
     - name: Download Artifact
       uses: actions/download-artifact@v2
       with:
         name: ${{matrix.artifact}}

     - name: Upload Release Asset
       id: upload-release-asset
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ needs.release.outputs.release_upload_url }}
         asset_path: stork
         asset_name: ${{ matrix.artifact }}
         asset_content_type: application/octet-stream

  upload_web_artifacts_to_release:
    name: "Upload web artifacts to Github Release"
    runs-on: "ubuntu-latest"
    needs: ["release", "build_web_artifacts"]
    steps:
      - uses: actions/download-artifact@v2

      - name: Upload WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_path: web-artifacts/stork.wasm
          asset_name: stork.wasm
          asset_content_type: application/wasm

      - name: Upload stork.js
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_path: web-artifacts/stork.js
          asset_name: stork.js
          asset_content_type: application/javascript

  upload_artifacts_to_s3:
    name: "Upload Artifacts to S3"
    runs-on: "ubuntu-latest"
    needs: ["build_ubuntu_20", "build_macos_10_15", "build_web_artifacts"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - uses: actions/download-artifact@v2

      - name: Run Upload Script
        run: |
          cd scripts
          python3 upload_federalist.py 0.0.0-test
          #python3 upload_federalist.py ${{ github.events.input.fake_tag || github.ref }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}

